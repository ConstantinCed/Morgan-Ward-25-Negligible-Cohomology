  # Define H₄ as a Coxeter group using its permutation representation
W = CoxeterGroup(["H", 4], implementation="permutation")
print("Order of H4:", W.order())

# Compute a Sylow 2-subgroup (p = 2)
S2 = W.sylow_subgroup(2)
print("Order of Sylow 2-subgroup:", S2.order())
print(S2)

# Get the generators of the Sylow 2-subgroup
gens = S2.gens()

# Check pairwise if they commute
for i in range(len(gens)):
    for j in range(i+1, len(gens)):
        commute = (gens[i] * gens[j] == gens[j] * gens[i])
        print("Generators", i, "and", j, "commute?", commute)

# or, check if the whole subgroup is abelian
print("Is S2 abelian?", S2.is_abelian())

print("Testing minimality of the generating set:")
for i in range(len(gens)):
    subset = [gens[j] for j in range(len(gens)) if j != i]
    H = S2.subgroup(subset)
    print("Removing generator", i, "produces subgroup of order", H.order(),
          "== S2.order()?", H.order() == S2.order())

# Remove generator 2 (i.e. gens[2]) to form a new subgroup H2
gens_reduced = [gens[i] for i in (0, 1, 3)]
H2 = S2.subgroup(gens_reduced)
print("Order of subgroup without generator 2:", H2.order())
print("Does the subgroup without generator 2 equal S2?", H2 == S2)


# Now, use GAP to test for an isomorphism with groups of order 64.


# Rather than using the full S2.gap() (which can be huge), we rebuild S2 in GAP from its generators and convert each generator individually
gap_gens = [str(g.gap()) for g in S2.gens()]
# Build a GAP command to define S2 as the group generated by these elements.
gap_command = "S2 := Group({});".format(", ".join(gap_gens))
gap.eval(gap_command)

# we compute the IdGroup of S2.
idS2 = gap.eval("IdGroup(S2);")
print("IdGroup of S2 =", idS2.strip())

match = None
# Loop through all candidate groups from the SmallGroups library for order 64 (IDs 1 to 268).
for i in range(1, 269):
    gap.eval("G := SmallGroup(64, {});".format(i))
    idG = gap.eval("IdGroup(G);")
    if idS2.strip() == idG.strip():
        match = i
        print("S2 is isomorphic to SmallGroup(64, {})".format(i))
        break

if match is None:
    print("No isomorphic group of order 64 found for S2.")
