# Work over the finite field GF(2)
R.<x,y,z> = PolynomialRing(GF(2), 3)

# Define the ideal I in R
I = R.ideal([x*y^2 + x^2*y,  x*z^2 + x^2*z,  y*z^2 + y^2*z])

# We want to compute I ∩ S, where the subring S is generated by
# z,  x*y^2+x^2*y,  y^3+x^2*y+x^3,  y^2+xy+x^2.
# We introduce new variables u, v, w, t corresponding respectively to
# z, x*y^2+x^2*y, y^3+x^2*y+x^3, and y^2+xy+x^2.
# For elimination purposes, we create a larger ring T.
T = PolynomialRing(GF(2), 'x,y,z,u,v,w,t', order='lex')
x, y, z, u, v, w, t = T.gens()

# Set up the relations
J = T.ideal([ u - z,
              v - (x*y^2 + x^2*y),
              w - (y^3 + x^2*y + x^3),
              t - (y^2 + x*y + x^2) ])

# Extend the ideal I to T (the same generators, but now viewed in T)
I_T = T.ideal([x*y^2 + x^2*y,  x*z^2 + x^2*z,  y*z^2 + y^2*z])

# Combine the ideals: the ideal K that encodes both I and the defining relations for S.
K = I_T + J

# We now eliminate the variables x, y, z to obtain an ideal in GF(2)[u,v,w,t] which corresponds to I ∩ S.
elim_vars = [x, y, z]
L = K.elimination_ideal(elim_vars)

# Display the generators of the elimination ideal.
print("The generators for I ∩ S (expressed in terms of u, v, w, t) are:")
for g in L.gens():
    print(g)
